from bot import TOKEN, unknown, FAQ_list_inline, list_answers
from states import SVO
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import message, ReplyKeyboardRemove
import logging, asyncio, string, random, time, kb, re

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# handler –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç, {0.first_name}!'
        '\n–Ø ‚Äî HR-–±–æ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ. –ü–æ–º–æ–≥–∞—é –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –ø–µ—Ä–µ–π–¥–∏ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É'.format(message.from_user),
        reply_markup=kb.reply_main)

# handler –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def main(message: types.Message, state:FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer('–¢—ã –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å',
            reply_markup=kb.reply_menu)

    elif message.text == '‚úèÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        await message.answer('–í–≤–µ–¥–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=kb.reply_back)

        await SVO.question.set()

    elif message.text == 'üìù –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        send = await bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:',
            reply_markup=kb.inline_faq)

        back = await bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=kb.reply_back)

        async with state.proxy() as data:
            delete = back.message_id
            mes = send.message_id
            data["delete_id"] = delete
            data["message_id"] = mes

    elif message.text == 'üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞':
        send = await bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:',
            reply_markup=kb.inline_faq)

        back = await bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=kb.reply_back)

        async with state.proxy() as data:
            delete = back.message_id
            mes = send.message_id
            data["delete_id"] = delete
            data["message_id"] = mes

    elif message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–¢—ã –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å',
            reply_markup=kb.reply_menu)
        try:
            async with state.proxy() as data:
                mes = data["message_id"]

            await bot.delete_message(chat_id=message.chat.id,
                message_id=mes)
        except KeyError:
            print("Error: message_id not found")

    else:
        await message.answer(random.choice(unknown),
            reply_markup=kb.reply_menu)

# handler –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∑–∞–¥–∞—á—É –≤–æ–ø—Ä–æ—Å–∞
@dp.message_handler(state=SVO.question, content_types=types.ContentTypes.TEXT)
async def question(message: types.Message, state:FSMContext):
    question = message.text
    async with state.proxy() as data:
        data["question1"] = question
        answer = data["question1"]
    if answer == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–¢—ã –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å',
            reply_markup=kb.reply_menu)
        await state.reset_state()

    else:
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 0'''
        park = re.findall('–ø–∞—Ä–∫', answer, flags=re.I)
        places = re.findall('–º–µ—Å—Ç', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 1'''
        phone = re.findall('—Ç–µ–ª–µ—Ñ–æ–Ω', answer, flags=re.I)
        urgent = re.findall('—Å—Ä–æ—á', answer, flags=re.I)
        rescue = re.findall('—Å–ø–∞—Å–∞—Ç', answer, flags=re.I)
        service = re.findall('—Å–ª—É–∂–±', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 2'''
        passage = re.findall('–ø—Ä–æ—Ö–æ–¥', answer, flags=re.I)
        train = re.findall('–æ–±—É—á–µ', answer, flags=re.I)
        security = re.findall('–æ—Ö—Ä–∞–Ω', answer, flags=re.I)
        labor = re.findall('—Ç—Ä—É–¥–∞', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 3'''
        route = re.findall('–º–∞—Ä—à—Ä—É—Ç', answer, flags=re.I)
        corporate = re.findall('–∫–æ—Ä–ø–æ—Ä–∞—Ç', answer, flags=re.I)
        transport = re.findall('—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 4'''
        events = re.findall('—Å–æ–±—ã—Ç', answer, flags=re.I)
        tester = re.findall('–∏—Å–ø—ã—Ç', answer, flags=re.I)
        term = re.findall('—Å—Ä–æ–∫', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 5'''
        sale = re.findall('—Å–∫–∏–¥–∫', answer, flags=re.I)
        employee = re.findall('—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', answer, flags=re.I)
        worker = re.findall('—Ä–∞–±–æ—Ç–Ω–∏–∫', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 6'''
        mentor = re.findall('–Ω–∞—Å—Ç–∞–≤', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 7'''
        card = re.findall('–∫–∞—Ä—Ç', answer, flags=re.I)
        medicine = re.findall('–º–µ–¥–∏—Ü–∏–Ω', answer, flags=re.I)
        insurance = re.findall('—Å—Ç—Ä–∞—Ö–æ–≤', answer, flags=re.I)
        '''–ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å 8'''
        admission  = re.findall('–ø—Ä–æ–ø—É—Å–∫', answer, flags=re.I)

        if park or places:
            await message.answer(list_answers[0],
                reply_markup=kb.inline_more0)
            await state.reset_state()

        elif phone or urgent or rescue or service:
            await message.answer(list_answers[1] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

        elif sale or employee or worker:
            await message.answer(list_answers[2] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main, parse_mode='html')

            await state.reset_state()
            await SVO.again.set()

        elif mentor:
            await message.answer(list_answers[3] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

        elif route or corporate or transport:
            await message.answer(list_answers[4],
                reply_markup=kb.inline_more4)
            await state.reset_state()

        elif passage or train or security or labor:
            await message.answer(list_answers[5] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

        elif events or tester or term:
            await message.answer(list_answers[6] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

        elif admission:
            await message.answer(list_answers[7] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

        elif card or medicine or insurance:
            await message.answer(list_answers[8] + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

        else:
            await message.answer(f'{random.choice(unknown)}\n'
                '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                reply_markup=kb.reply_again_main)

            await state.reset_state()
            await SVO.again.set()

# handler –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –∫ –∑–∞–¥–∞—á–µ –≤–æ–ø—Ä–æ—Å–∞
@dp.message_handler(state=SVO.again, content_types=types.ContentTypes.TEXT)
async def again(message: types.Message, state:FSMContext):
    again = message.text
    async with state.proxy() as data:
        data["again1"] = again
        text = data["again1"]

    if text == 'üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞':
        await message.answer('–í–≤–µ–¥–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞, —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=kb.reply_back)

        await state.reset_state()
        await SVO.question.set()

    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer('–¢—ã –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å',
            reply_markup=kb.reply_menu)
        await state.reset_state()

    else:
        await message.answer(f'{random.choice(unknown)}\n'
            '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
            reply_markup=kb.reply_again_main)

        await state.reset_state()
        await SVO.again.set()

# callback inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda message: message.data.startswith("FAQ"))
async def faq(callback_query: types.CallbackQuery, state:FSMContext):
    await bot.answer_callback_query(callback_query.id)
    number = int(callback_query.data[3:])
    answer = FAQ_list_inline[number][1]

    async with state.proxy() as data:
        mes = data["message_id"]
        delete = data["delete_id"]

    await bot.delete_message(chat_id=callback_query.message.chat.id,
        message_id=mes)

    await bot.delete_message(chat_id=callback_query.message.chat.id,
        message_id=delete)

    '''–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'''
    await asyncio.sleep(0.1)

    await bot.send_message(callback_query.from_user.id, f'–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: "{FAQ_list_inline[number][0]}"',
        reply_markup=kb.reply_again_main)

    if number == 0:
        await bot.send_message(callback_query.from_user.id, answer,
            reply_markup=kb.inline_more0)

    elif number == 1:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main)

    elif number == 2:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

    elif number == 3:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main)

    elif number == 4:
        await bot.send_message(callback_query.from_user.id, answer,
            reply_markup=kb.inline_more4)

    elif number == 5:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main)

    elif number == 6:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main)

    elif number == 7:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main)

    elif number == 8:
        await bot.send_message(callback_query.from_user.id, answer + '\n\n–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main)

# callback inline –∫–Ω–æ–ø–æ–∫–∏ –ï—â–µ –¥–ª—è –≤–æ—Ä–æ—Å–∞ 0
@dp.callback_query_handler(lambda message: message.data.startswith("more0"))
async def more0(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    with open("/home/git/svo-tg/static/sticker1.webp", "rb") as file1:
        sticker1 = file1.read()

    with open("/home/git/svo-tg/static/sticker2.webp", "rb") as file2:
        sticker2 = file2.read()

    with open("/home/git/svo-tg/static/sticker3.webp", "rb") as file3:
        sticker3 = file3.read()

    with open("/home/git/svo-tg/static/sticker4.webp", "rb") as file4:
        sticker4 = file4.read()

    await bot.send_sticker(callback_query.from_user.id, sticker1)
    await bot.send_message(callback_query.from_user.id, '–ú–µ—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∫–∏–Ω–≥–∞:\n5000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü\n\n–ú–µ—Å—Ç–∞ –Ω–∞ –∫—Ä—ã—à–µ –ø–∞—Ä–∫–∏–Ω–≥–∞:\n4000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü',
        reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(3)

    await bot.send_sticker(callback_query.from_user.id, sticker2)
    await bot.send_message(callback_query.from_user.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n3000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü\n\n–î–ª—è —á–ª–µ–Ω–æ–≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞: 2500 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü')
    await asyncio.sleep(3.5)

    await bot.send_sticker(callback_query.from_user.id, sticker3)
    await bot.send_message(callback_query.from_user.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n2500 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü')
    await asyncio.sleep(3.5)

    await bot.send_sticker(callback_query.from_user.id, sticker4)
    await bot.send_message(callback_query.from_user.id, '–ü–∞—Ä–∫–æ–≤–∫–∞ –†4:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n5000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü\n\n–ü–∞—Ä–∫–æ–≤–∫–∞ –†6:\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n4000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü\n\n'
        '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kb.reply_again_main)

# callback inline –∫–Ω–æ–ø–æ–∫–∏ –ï—â–µ –¥–ª—è –≤–æ—Ä–æ—Å–∞ 4
@dp.callback_query_handler(lambda message: message.data.startswith("more4"))
async def more4(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏, –≤ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ –∏–ª–∏ –∏–∑ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ. –•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
        reply_markup=kb.reply_transport_main)
    await SVO.transport.set()

# handler –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
@dp.message_handler(state=SVO.transport, content_types=types.ContentTypes.TEXT)
async def transport(message: types.Message, state:FSMContext):
    transport = message.text
    async with state.proxy() as data:
        data["transport1"] = transport
        text = data["transport1"]

    if text == '–í –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ':
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏–ª–∏ –æ—Ç–∫—É–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ',
            reply_markup=kb.reply_from_location)

        await state.reset_state()
        await SVO.from_location.set()

    elif text == '–ò–∑ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ':
        await message.answer('–í—ã–±–µ—Ä–∏ –∫—É–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ',
            reply_markup=kb.reply_to_location)

        await state.reset_state()
        await SVO.to_location.set()
    
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer('–¢—ã –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å',
            reply_markup=kb.reply_menu)
        await state.reset_state()

    else:
        await message.answer(f'{random.choice(unknown)}\n'
            '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
            reply_markup=kb.reply_transport_main)

        await state.reset_state()
        await SVO.transport.set()

# handler –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è
@dp.message_handler(state=SVO.from_location, content_types=types.ContentTypes.TEXT)
async def from_location(message: types.Message, state:FSMContext):
    from_location = message.text
    async with state.proxy() as data:
        data["from_location1"] = from_location
        text = data["from_location1"]

    if text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏, –≤ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ –∏–ª–∏ –∏–∑ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ. –•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=kb.reply_transport_main)

        await state.reset_state()
        await SVO.transport.set()

    elif text == '–õ–æ–±–Ω—è':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ3</ins>:\n–°—Ç–∞–Ω—Ü–∏—è –õ–æ–±–Ω—è - –ö–∞—Ñ–µ ¬´–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å¬ª ‚Äî 07:15\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ5</ins>:\n–°—Ç–∞–Ω—Ü–∏—è –õ–æ–±–Ω—è - –¢–µ—Ä–º–∏–Ω–∞–ª D ‚Äî 06:30 (–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º 6:45), 18:50\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ6</ins>:\n–°—Ç–∞–Ω—Ü–∏—è –õ–æ–±–Ω—è - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 08:25 (–ø–æ –±—É–¥–Ω—è–º)\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ1</ins>:\n–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ - –ö–∞—Ñ–µ ¬´–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å¬ª ‚Äî 07:05\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ2</ins>:\n–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 07:40 (–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º 8:00)\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ4</ins>:\n–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 06:30 (–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º 6:45), 18:50\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–ú–µ—Ç—Ä–æ –°—Ö–æ–¥–Ω–µ–Ω—Å–∫–∞—è':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ10</ins>:\n–º–µ—Ç—Ä–æ –°—Ö–æ–¥–Ω–µ–Ω—Å–∫–∞—è - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 07:50\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ7</ins>:\n–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥ - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 06:25, 18:10\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ8</ins>:\n–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥ - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 07:25\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–•–ª–µ–±–Ω–∏–∫–æ–≤–æ':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ11</ins>:\n–•–ª–µ–±–Ω–∏–∫–æ–≤–æ - –¢–µ—Ä–º–∏–Ω–∞–ª E ‚Äî 07:00, 08:30, 19:00\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    else:
        await message.answer(f'{random.choice(unknown)}\n'
            '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
            reply_markup=kb.reply_from_location)

        await state.reset_state()
        await SVO.from_location.set()

# handler –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è
@dp.message_handler(state=SVO.to_location, content_types=types.ContentTypes.TEXT)
async def to_location(message: types.Message, state:FSMContext):
    to_location = message.text
    async with state.proxy() as data:
        data["to_location1"] = to_location
        text = data["to_location1"]

    if text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏, –≤ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ –∏–ª–∏ –∏–∑ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ. –•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
            reply_markup=kb.reply_transport_main)

        await state.reset_state()
        await SVO.transport.set()

    elif text == '–õ–æ–±–Ω—è':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ5</ins>:\n–¢–µ—Ä–º–∏–Ω–∞–ª E - —Å—Ç–∞–Ω—Ü–∏—è –õ–æ–±–Ω—è ‚Äî 08:20, 17:05 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 14:35), 20:15\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ1</ins>:\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è - –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ ‚Äî 18:15 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:45)\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ2</ins>:\n7 –∫–æ—Ä–ø—É—Å - –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ ‚Äî 18:05 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:50)\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ3</ins>:\n7 –∫–æ—Ä–ø—É—Å - –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ (—É–ª. –¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è) ‚Äî 17:05 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 14:35)\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ4</ins>:\n–¢–µ—Ä–º–∏–Ω–∞–ª E - –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ ‚Äî 08:20, 17:50 (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:35), 20:15\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ6</ins>:\n–¢–µ—Ä–º–∏–Ω–∞–ª E - —Å—Ç. –õ–æ–±–Ω—è - –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ ‚Äî 18:15 (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:45)\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ8</ins>:\n–¢–µ—Ä–º–∏–Ω–∞–ª E - –î–µ–ø–æ - –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ ‚Äî 09:10\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–ú–µ—Ç—Ä–æ –°—Ö–æ–¥–Ω–µ–Ω—Å–∫–∞—è':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ10</ins>:\n–®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ 1 - –º.–°—Ö–æ–¥–Ω–µ–Ω—Å–∫–∞—è ‚Äî 18:15 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:45)\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ7</ins>:\n–¢–µ—Ä–º–∏–Ω–∞–ª E - –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥ ‚Äî 08:30, 17:05 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 14:35)\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ7</ins>:\n–®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ 1 - –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥ ‚Äî 20:15\n\n'
            '<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ8</ins>:\n–ö–æ—Ä–ø—É—Å ‚Ññ7 - –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥ ‚Äî 18:15 (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:45)\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    elif text == '–•–ª–µ–±–Ω–∏–∫–æ–≤–æ':
        await message.answer('<ins>–ú–∞—Ä—à—Ä—É—Ç ‚Ññ11</ins>:\n–¢–µ—Ä–º–∏–Ω–∞–ª E - –•–ª–µ–±–Ω–∏–∫–æ–≤–æ ‚Äî 08:10, 09:10, 17:05 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 14:35), 18:15 –ø–æ –±—É–¥–Ω—è–º (–ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º 15:45), 20:15\n\n'
            '–ú–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=kb.reply_again_main, parse_mode='html')

        await state.reset_state()

    else:
        await message.answer(f'{random.choice(unknown)}\n'
            '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
            reply_markup=kb.reply_to_location)

        await state.reset_state()
        await SVO.to_location.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
